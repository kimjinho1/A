generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 차량 규격
model CarType {
  carTypeId   Int    @id @default(autoincrement()) @map("car_type_id")
  carTypeCode String @unique @map("car_type_code") @db.VarChar(10)
  carTypeName String @unique @map("car_type_name") @db.VarChar(20)

  car Car[]
}

// 차종
model Car {
  carId        Int    @id @default(autoincrement()) @map("car_id")
  carCode      String @unique @map("car_code") @db.VarChar(10)
  carName      String @unique @map("car_name") @db.VarChar(10)
  carImagePath String @unique @map("car_image_path") @db.VarChar(255)
  carTypeId    Int    @map("car_type_id")

  carEngine  CarEngine[]
  carMission CarMission[]
  carDrive   CarDrive[]
  carTrim    CarTrim[]
  intColor   IntColor[]
  extColor   ExtColor[]
  carModel   CarModel[]

  carType CarType @relation(fields: [carTypeId], references: [carTypeId], onDelete: Cascade)
}

// 엔진
model Engine {
  engineId   Int    @id @default(autoincrement()) @map("engine_id")
  engineCode String @unique @map("engine_code") @db.VarChar(10)
  engineName String @unique @map("engine_name") @db.VarChar(20)

  carEngine CarEngine[]
  carModel  CarModel[]
}

// 변속기
model Mission {
  missionId   Int    @id @default(autoincrement()) @map("mission_id")
  missionCode String @unique @map("mission_code") @db.VarChar(10)
  missionName String @map("mission_name") @db.VarChar(20)

  carMission CarMission[]
  carModel   CarModel[]
}

// 구동방식
model Drive {
  driveId   Int    @id @default(autoincrement()) @map("drive_id")
  driveCode String @unique @map("drive_code") @db.VarChar(10)
  driveName String @unique @map("drive_name") @db.VarChar(20)

  carDrive CarDrive[]
  carModel CarModel[]
}

// 트림
model Trim {
  trimId   Int    @id @default(autoincrement()) @map("trim_id")
  trimCode String @unique @map("trim_code") @db.VarChar(10)
  trimName String @unique @map("trim_name") @db.VarChar(20)

  carTrim        CarTrim[]
  carModel       CarModel[]
  trimIntColor   TrimIntColor[]
  activateOption ActivateOption[]
}

// 차종과 선택 가능 품목(엔진, 변속기, 구동방식, 트림)의 호환 관계들
model CarEngine {
  carId    Int @map("car_id")
  engineId Int @map("engine_id")

  car    Car    @relation(fields: [carId], references: [carId], onDelete: Cascade)
  engine Engine @relation(fields: [engineId], references: [engineId], onDelete: Cascade)

  @@id([carId, engineId])
}

model CarMission {
  carId     Int @map("car_id")
  missionId Int @map("mission_id")

  car     Car     @relation(fields: [carId], references: [carId], onDelete: Cascade)
  mission Mission @relation(fields: [missionId], references: [missionId], onDelete: Cascade)

  @@id([carId, missionId])
}

model CarDrive {
  carId   Int @map("car_id")
  driveId Int @map("drive_id")

  car   Car   @relation(fields: [carId], references: [carId], onDelete: Cascade)
  drive Drive @relation(fields: [driveId], references: [driveId], onDelete: Cascade)

  @@id([carId, driveId])
}

model CarTrim {
  carId  Int @map("car_id")
  trimId Int @map("trim_id")

  car  Car  @relation(fields: [carId], references: [carId], onDelete: Cascade)
  trim Trim @relation(fields: [trimId], references: [trimId], onDelete: Cascade)

  @@id([carId, trimId])
}

// 판매 차량 모델
model CarModel {
  modelId        Int    @id @default(autoincrement()) @map("model_id")
  modelCode      String @unique @map("model_code") @db.VarChar(10)
  modelName      String @unique @map("model_name") @db.VarChar(50)
  modelPrice     Int    @map("model_price")
  modelImagePath String @map("model_image_path") @db.VarChar(255)

  carId     Int  @map("car_id")
  engineId  Int  @map("engine_id")
  missionId Int  @map("mission_id")
  driveId   Int? @map("drive_id")
  trimId    Int  @map("trim_id")

  carModelOption CarModelOption[]

  car     Car     @relation(fields: [carId], references: [carId], onDelete: Cascade)
  engine  Engine  @relation(fields: [engineId], references: [engineId], onDelete: Cascade)
  mission Mission @relation(fields: [missionId], references: [missionId], onDelete: Cascade)
  drive   Drive?  @relation(fields: [driveId], references: [driveId], onDelete: Cascade)
  trim    Trim    @relation(fields: [trimId], references: [trimId], onDelete: Cascade)
}

// 내장색상
model IntColor {
  intColorId        Int    @id @default(autoincrement()) @map("int_color_id")
  intColorCode      String @map("int_color_code") @db.VarChar(10)
  intColorName      String @map("int_color_name") @db.VarChar(50)
  intColorImagePath String @map("int_color_image_path") @db.VarChar(255)
  carId             Int    @map("car_id")

  intExtColor    IntExtColor[]
  trimIntColor   TrimIntColor[]
  intColorOption IntColorOption[]

  car Car @relation(fields: [carId], references: [carId], onDelete: Cascade)
}

// 외장색상
model ExtColor {
  extColorId        Int    @id @default(autoincrement()) @map("ext_color_id")
  extColorCode      String @map("ext_color_code") @db.VarChar(10)
  extColorName      String @map("ext_color_name") @db.VarChar(50)
  extColorImagePath String @map("ext_color_image_path") @db.VarChar(255)
  carId             Int    @map("car_id")

  intExtColor IntExtColor[]

  car Car @relation(fields: [carId], references: [carId], onDelete: Cascade)
}

// 내장색상과 외장색상 호환 관계
model IntExtColor {
  intColorId Int @map("int_color_id")
  extColorId Int @map("ext_color_id")

  intColor IntColor @relation(fields: [intColorId], references: [intColorId], onDelete: Cascade)
  extColor ExtColor @relation(fields: [extColorId], references: [extColorId], onDelete: Cascade)

  @@id([intColorId, extColorId])
}

// Trim, IntColor 호환 관계
model TrimIntColor {
  trimId     Int @map("trim_id")
  intColorId Int @map("int_color_id")

  trim     Trim     @relation(fields: [trimId], references: [trimId], onDelete: Cascade)
  intColor IntColor @relation(fields: [intColorId], references: [intColorId], onDelete: Cascade)

  @@id([trimId, intColorId])
}

// 옵션 타입
model OptionType {
  optionTypeId   Int    @id @default(autoincrement()) @map("option_type_id")
  optionTypeName String @map("option_type_name") @db.VarChar(20)

  option Option[]
}

// 상세 품목
model Option {
  optionId        Int    @id @default(autoincrement()) @map("option_id")
  optionCode      String @unique @map("option_code") @db.VarChar(10)
  optionName      String @map("option_name") @db.VarChar(50)
  optionPrice     Int    @map("option_price")
  optionImagePath String @map("option_image_path") @db.VarChar(255)
  optionTypeId    Int    @map("option_type_id")

  optionType                    OptionType         @relation(fields: [optionTypeId], references: [optionTypeId], onDelete: Cascade)
  carModelOption                CarModelOption[]
  intColorOption                IntColorOption[]
  selectedOptionForActivation   ActivateOption[]   @relation(name: "selectedOptionForActivation")
  optionToActivate              ActivateOption[]   @relation(name: "optionToActivate")
  selectedOptionForDeactivation DeactivateOption[] @relation(name: "selectedOptionForDeactivation")
  optionToDeactivate            DeactivateOption[] @relation(name: "optionToDeactivate")
  selectedOptionForDelete       DeleteOption[]     @relation(name: "selectedOptionForDelete")
  optionToDelete                DeleteOption[]     @relation(name: "optionToDelete")
}

// 모델과 옵션의 호환 관계
model CarModelOption {
  modelId  Int @map("model_id")
  optionId Int @map("option_id")

  carModel CarModel @relation(fields: [modelId], references: [modelId], onDelete: Cascade)
  option   Option   @relation(fields: [optionId], references: [optionId], onDelete: Cascade)

  @@id([modelId, optionId])
}

// 특정 내장색상이 선택되면 자동으로 선택되는 옵션
model IntColorOption {
  intColorId Int @map("int_color_id")
  optionId   Int @map("option_id")

  intColor IntColor @relation(fields: [intColorId], references: [intColorId], onDelete: Cascade)
  option   Option   @relation(fields: [optionId], references: [optionId], onDelete: Cascade)

  @@id([intColorId, optionId])
}

// 특정 옵션이 선택되면 활성화되는 옵션
model ActivateOption {
  trimId           Int @map("trim_id")
  optionId         Int @map("option_id")
  activateOptionId Int @map("activate_option_id")

  trim                        Trim   @relation(fields: [trimId], references: [trimId], onDelete: Cascade)
  selectedOptionForActivation Option @relation(name: "selectedOptionForActivation", fields: [optionId], references: [optionId], onDelete: Cascade)
  optionToActivate            Option @relation(name: "optionToActivate", fields: [activateOptionId], references: [optionId], onDelete: Cascade)

  @@id([trimId, optionId, activateOptionId])
}

// 특정 옵션이 선택되면 비활성화되는 옵션
model DeactivateOption {
  optionId           Int @map("option_id")
  deactivateOptionId Int @map("deactivate_option_id")

  selectedOptionForDeactivation Option @relation(name: "selectedOptionForDeactivation", fields: [optionId], references: [optionId], onDelete: Cascade)
  optionToDeactivate            Option @relation(name: "optionToDeactivate", fields: [deactivateOptionId], references: [optionId], onDelete: Cascade)

  @@id([optionId, deactivateOptionId])
}

// 특정 옵션이 선택되면 사라져야되는 옵션
model DeleteOption {
  optionId       Int @map("option_id")
  deleteOptionId Int @map("delete_option_id")

  selectedOptionForDelete Option @relation(name: "selectedOptionForDelete", fields: [optionId], references: [optionId], onDelete: Cascade)
  optionToDelete          Option @relation(name: "optionToDelete", fields: [deleteOptionId], references: [optionId], onDelete: Cascade)

  @@id([optionId, deleteOptionId])
}
